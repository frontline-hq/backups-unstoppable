# helmfile.yaml
environments:
    default:
        values:
        {{- range $index, $item := readDirEntries "./vars/test/" }}
        {{- if $item.IsDir }}
        - {{ $item.Name }}:
            sftp:
                host_pubkey: "ref+file://vars/test/{{ $item.Name }}/host_id_ed25519.pub"
                host_privkey: "ref+file://vars/test/{{ $item.Name }}/host_id_ed25519"
                user_pubkey: "ref+file://vars/test/{{ $item.Name }}/user_id_ed25519.pub"
                user_privkey: "ref+file://vars/test/{{ $item.Name }}/user_id_ed25519"
                host: "ref+file://vars/test/{{ $item.Name }}/secrets.yaml#/sftp/host"
                port: "ref+file://vars/test/{{ $item.Name }}/secrets.yaml#/sftp/port"
                user: "ref+file://vars/test/{{ $item.Name }}/secrets.yaml#/sftp/user"
                mount_path_in_docker: "ref+file://vars/test/{{ $item.Name }}/secrets.yaml#/sftp/mount_path_in_docker"
                persisted: {{ readFile (printf "./vars/test/%s/secrets.yaml" $item.Name) | fromYaml | get "test.sftp.persistance" | default "persisted" }}
            remote:
                endpoint: "ref+file://vars/test/{{ $item.Name }}/secrets.yaml#/remote/endpoint"
                bucket_name: "ref+file://vars/test/{{ $item.Name }}/secrets.yaml#/remote/bucket_name"
                path: "ref+file://vars/test/{{ $item.Name }}/secrets.yaml#/remote/path"
                access_key_id: "ref+file://vars/test/{{ $item.Name }}/secrets.yaml#/remote/access_key_id"
                secret_access_key: "ref+file://vars/test/{{ $item.Name }}/secrets.yaml#/remote/secret_access_key"
                persisted: {{ readFile (printf "./vars/test/%s/secrets.yaml" $item.Name) | fromYaml | get "test.minio.persistance" | default "persisted" }}
            rustic:
                encryption_password: "ref+file://vars/test/{{ $item.Name }}/secrets.yaml#/rustic/encryption_password"
        {{- end }}
        {{- end }}
    production:
        values:
        {{- range $index, $item := readDirEntries "./vars/test/" }}
        {{- if $item.IsDir }}
        - {{ $item.Name }}:
            sftp:
                host_pubkey: "ref+file://vars/test/{{ $item.Name }}/host_id_ed25519.pub"
                host_privkey: "ref+file://vars/test/{{ $item.Name }}/host_id_ed25519"
                user_pubkey: "ref+file://vars/test/{{ $item.Name }}/user_id_ed25519.pub"
                user_privkey: "ref+file://vars/test/{{ $item.Name }}/user_id_ed25519"
                host: "ref+file://vars/test/{{ $item.Name }}/secrets.yaml#/sftp/host"
                port: "ref+file://vars/test/{{ $item.Name }}/secrets.yaml#/sftp/port"
                user: "ref+file://vars/test/{{ $item.Name }}/secrets.yaml#/sftp/user"
                mount_path_in_docker: "ref+file://vars/test/{{ $item.Name }}/secrets.yaml#/sftp/mount_path_in_docker"
            remote:
                endpoint: "ref+file://vars/test/{{ $item.Name }}/secrets.yaml#/remote/endpoint"
                bucket_name: "ref+file://vars/test/{{ $item.Name }}/secrets.yaml#/remote/bucket_name"
                path: "ref+file://vars/test/{{ $item.Name }}/secrets.yaml#/remote/path"
                access_key_id: "ref+file://vars/test/{{ $item.Name }}/secrets.yaml#/remote/access_key_id"
                secret_access_key: "ref+file://vars/test/{{ $item.Name }}/secrets.yaml#/remote/secret_access_key"
                persisted: {{ readFile (printf "./vars/test/%s/secrets.yaml" $item.Name) | fromYaml | get "test.minio.persistance" | default "persisted" }}
            rustic:
                encryption_password: "ref+file://vars/test/{{ $item.Name }}/secrets.yaml#/rustic/encryption_password"
        {{- end }}
        {{- end }}
---
# Build rustic docker image
{{ $values := .Values }}
{{ $env := .Environment.Name | default "default" }}
# Repositories for Helm charts
repositories:
    - name: openebs
      url: https://openebs.github.io/openebs
    # community version of minio
    - name: minio
      url: https://charts.min.io/
    - name: emberstack
      url: https://emberstack.github.io/helm-charts
    - name: harbor
      url: https://helm.goharbor.io

releases:
    - name: openebs
      namespace: openebs
      chart: openebs/openebs
      version: ^4.1.2 # Specify the desired version of OpenEBS
      createNamespace: true
      wait: true
      hooks:
          - events: ["presync"]
            showlogs: true
            command: "sh"
            args:
                - "-c"
                - "kubectl create namespace openebs --dry-run=client -o yaml | kubectl apply -f -"
          - events: ["presync"]
            showlogs: true
            command: "kubectl"
            args:
                - patch
                - namespace
                - openebs
                - -p
                - '{"metadata": {"labels":{"pod-security.kubernetes.io/enforce": "privileged"}}}'
      set:
          - name: engines.replicated.mayastor.enabled
            value: false
      values:
          - zfs-localpv:
                enabled: false
    {{- range $key, $value := .Values }}
    {{- if eq $value.remote.persisted "persisted" }}
    - name: sftp-storage-{{ $key }}
      namespace: sftp
      chart: "./storage"
      version: "0.1.0"
      createNamespace: true
      wait: true
      hooks:
        - events: ["presync"]
          showlogs: true
          command: "/bin/bash"
          args:
            - "./talos-storage-patch.sh"
        - events: ["presync"]
          showlogs: true
          command: "/bin/bash"
          args:
            - "./storage/scripts/release-pv-claims.sh"
            - "local-openebs-hostpath-sftp-{{ $key }}"
      needs:
        - openebs/openebs
      set:
        - name: name
          value: {{ $key }}
        - name: service
          value: sftp
    {{- end }}
    - name: sftp-{{ $key }}
      namespace: sftp
      chart: emberstack/sftp
      version: ^5.1.71
      createNamespace: true
      {{- if eq $value.remote.persisted "persisted" }}
      needs:
        - sftp/sftp-storage-{{ $key }}
      {{- end }}
      values:
        - configuration:
            Global:
              Chroot:
                Directory: "%h"
                StartPath: sftp
              Directories:
                - sftp
              HostKeys:
                Ed25519: {{ $value.sftp.host_privkey | quote }}
            Users:
              - Username: "user"
                PublicKeys:
                  - {{ $value.sftp.user_pubkey | quote }}
                Chroot:
                  Directories: "sftp"
        {{- if eq $value.remote.persisted "persisted" }}
        - storage:
            volumes:
              - name: "sftp-storage"
                persistentVolumeClaim:
                  claimName: "sftp-{{ $key }}-local-pvc"
            volumeMounts:
              - name: "sftp-storage"
                mountPath: "/home/user/sftp"
        {{- end }}
        - service:
            type: ClusterIP
            ports:
                - port: 22
    {{- end }}
    {{- if ne .Environment.Name "production" }}
    - name: minio-storage-persisted
      namespace: minio-persisted
      chart: "./storage"
      version: "0.1.0"
      createNamespace: true
      wait: true
      hooks:
        - events: ["presync"]
          showlogs: true
          command: "/bin/bash"
          args:
            - "./talos-storage-patch.sh"
        - events: ["presync"]
          showlogs: true
          command: "/bin/bash"
          args:
            - "./storage/scripts/release-pv-claims.sh"
            - "local-openebs-hostpath-minio-persisted"
      needs:
        - openebs/openebs
      set:
        - name: name
          value: persisted
        - name: service
          value: minio
    {{- range $type := list "persisted" "temporary" }}
    - name: "minio-{{ $type }}"
      namespace: "minio-{{ $type }}"
      chart: minio/minio
      version: ^5.4.0
      createNamespace: true
      {{- if eq $type "persisted" }}
      needs:
          - "minio-{{ $type }}/minio-storage-persisted"
      {{- end }}
      values:
          - minioAPIPort: 9000
          - minioConsolePort: 9001
          - service:
                type: ClusterIP
          - resources:
                requests:
                    memory: 512Mi
          - replicas: 1
          - persistence:
                {{- if eq $type "persisted" }}
                existingClaim: minio-persisted-local-pvc
                {{- else }}
                enabled: false
                {{- end }}
          - mode: standalone
          - rootUser: rootuser
          - rootPassword: rootpass123
          - policies:
              {{- range $key, $value := $values }}
              {{- if eq $type $value.remote.persisted }}
              - name: "full-access-bucket-{{ $key }}"
                statements:
                  - effect: Allow
                    resources:
                      - "arn:aws:s3:::{{ $key }}"
                      - "arn:aws:s3:::{{ $key }}/*"
                    actions:
                      - "s3:*"
              {{- end }}
              {{- end }}
          - users:
              {{- range $key, $value := $values }}
              {{- if eq $type $value.remote.persisted }}
              - accessKey: {{ $value.remote.access_key_id }}
                secretKey: {{ $value.remote.secret_access_key }}
                policy: full-access-bucket-{{ $key }}
              {{- end }}
              {{- end }}
          - buckets:
                {{- range $key, $value := $values }}
                {{- if eq $type $value.remote.persisted }}
                - name: {{ $key }}
                {{- end }}
                {{- end }}
    {{- end }}
    {{- end }}
    - name: "rustic-image"
      namespace: "rustic"
      chart: "./rustic-image"
      version: ^0.1.0
      createNamespace: true
      values:
        - registry:
            namespace: "benjmanable"
            username: "ref+file://vars/test/secrets.yaml#/docker_hub/username"
            password: "ref+file://vars/test/secrets.yaml#/docker_hub/password"
        - kaniko:
            secret_content: "{\"auths\": {\"https://index.docker.io/v1/\": {\"auth\": \"{{ printf "%s:%s" ("ref+file://vars/test/secrets.yaml#/docker_hub/username" | fetchSecretValue ) ("ref+file://vars/test/secrets.yaml#/docker_hub/password" | fetchSecretValue ) | b64enc }}\"}}}"
    {{- range $key, $value := $values }}
    - name: "rustic-{{ $key }}"
      namespace: "rustic"
      chart: "./rustic"
      version: ^0.1.0
      createNamespace: true
      {{- if ne $env "production" }}
      needs:
          - "minio-{{ $value.remote.persisted }}/minio-{{ $value.remote.persisted }}"
          - "sftp/sftp-{{ $key }}"
          - "rustic/rustic-image"
      {{- end }}
      values:
        - sftp:
            host_pubkey: {{ $value.sftp.host_pubkey }}
            host_privkey: {{ $value.sftp.host_privkey }}
            user_pubkey: {{ $value.sftp.user_pubkey }}
            user_privkey: {{ $value.sftp.user_privkey }}
            host: {{ $value.sftp.host }}
            port: {{ $value.sftp.port }}
            user: {{ $value.sftp.user }}
            mount_path_in_docker: {{ $value.sftp.mount_path_in_docker }}
        - remote:
            endpoint: {{ $value.remote.endpoint }}
            bucket_name: {{ $value.remote.bucket_name }}
            path: {{ $value.remote.path }}
            access_key_id: {{ $value.remote.access_key_id }}
            secret_access_key: {{ $value.remote.secret_access_key }}
            persisted: {{ $value.remote.persisted }}
        - rustic:
            encryption_password: {{ $value.rustic.encryption_password }}
        - environment:
            name: {{ $env }}
    {{- end }}
